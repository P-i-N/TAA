/****************************************************************************************************************
/__/\\\\\\\\\\\\\\\_____/\\\\\\\\\________/\\\\\\\\\____________/                                               |
/__\///////\\\/////____/\\\\\\\\\\\\\____/\\\\\\\\\\\\\_________/   Callum James Glover                         |
/_________\/\\\________/\\\/////////\\\__/\\\/////////\\\_______/   NCCA, Bournemouth University                |
/__________\/\\\_______\/\\\_______\/\\\_\/\\\_______\/\\\______/   s4907224@bournemouth.ac.uk                  |
/___________\/\\\_______\/\\\\\\\\\\\\\\\_\/\\\\\\\\\\\\\\\_____/   callum@glovefx.com                          |
/____________\/\\\_______\/\\\/////////\\\_\/\\\/////////\\\____/   07946 750075                                |
/_____________\/\\\_______\/\\\_______\/\\\_\/\\\_______\/\\\___/   Level 6 Computing for Animation Project     |
/______________\/\\\_______\/\\\_______\/\\\_\/\\\_______\/\\\__/   https://github.com/NCCA/CA1-2018-s4907224   |
/_______________\///________\///________\///__\///________\///__/                                               |
****************************************************************************************************************/
//---------------------------------------------------------------------------------------------------------------
/// @file objhandler.cpp
/// @brief Handles object properties such as their location, velocity, shader parameters and mesh
//---------------------------------------------------------------------------------------------------------------
#include "objhandler.h"
#include <glm/gtc/constants.hpp>
//---------------------------------------------------------------------------------------------------------------
/// @brief Simple constructor for an object, it's shader properties and velocities.
//---------------------------------------------------------------------------------------------------------------
ObjHandler::ObjHandler() : m_shaderProps ({1.f, 1.f, 1.f},
                                          {1.f, 1.f, 1.f},
                                           1.f,
                                           1.f,
                                           0.25f,
                                           0.1f,
                                           1.f,
                                           99999),
                            objectCentre (0.f, 0.f, 0.f),
                            angularVelocity (0.f, 1.f, 0.f),
                            linearVelocity (0.f, 0.f, 0.f)
{
  m_now = std::chrono::high_resolution_clock::now();
  m_last = std::chrono::high_resolution_clock::now();
}
//---------------------------------------------------------------------------------------------------------------
/// @brief Default destructor.
//---------------------------------------------------------------------------------------------------------------
ObjHandler::~ObjHandler() = default;
//---------------------------------------------------------------------------------------------------------------
/// @brief Basic update method that increases both linear and angular velocity in a time dependant manner (i.e.
/// not tied to the frame rate).
//---------------------------------------------------------------------------------------------------------------
void ObjHandler::update()
{
  m_now = std::chrono::high_resolution_clock::now();
  float delta = std::chrono::duration_cast<std::chrono::nanoseconds>(m_now - m_last).count();
  m_last = m_now;
  delta *= 0.000000001f;
  position += linearVelocity * delta;
  rotation += angularVelocity * delta;
}
